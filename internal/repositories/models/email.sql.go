// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO email (message_id, from_email, to_email, subject, content, sent_for) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, message_id, from_email, to_email, subject, content, sent_for, created_at, updated_at, version
`

type CreateEmailParams struct {
	MessageID string `json:"message_id"`
	FromEmail string `json:"from_email"`
	ToEmail   string `json:"to_email"`
	Subject   string `json:"subject"`
	Content   string `json:"content"`
	SentFor   string `json:"sent_for"`
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRow(ctx, createEmail,
		arg.MessageID,
		arg.FromEmail,
		arg.ToEmail,
		arg.Subject,
		arg.Content,
		arg.SentFor,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.FromEmail,
		&i.ToEmail,
		&i.Subject,
		&i.Content,
		&i.SentFor,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT email.id, email.message_id, email.from_email, email.to_email, email.subject, email.content, email.sent_for, email.created_at, email.updated_at, email.version FROM email
WHERE email.id = $1
`

type GetEmailByIDRow struct {
	Email Email `json:"email"`
}

func (q *Queries) GetEmailByID(ctx context.Context, id uuid.UUID) (GetEmailByIDRow, error) {
	row := q.db.QueryRow(ctx, getEmailByID, id)
	var i GetEmailByIDRow
	err := row.Scan(
		&i.Email.ID,
		&i.Email.MessageID,
		&i.Email.FromEmail,
		&i.Email.ToEmail,
		&i.Email.Subject,
		&i.Email.Content,
		&i.Email.SentFor,
		&i.Email.CreatedAt,
		&i.Email.UpdatedAt,
		&i.Email.Version,
	)
	return i, err
}
