// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: serviceapis/messaging/v1/email.proto

package messagingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mcorrigan89/messaging/internal/api/serviceapis/messaging/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmailServiceName is the fully-qualified name of the EmailService service.
	EmailServiceName = "serviceapis.messaging.v1.EmailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmailServiceSendEmailProcedure is the fully-qualified name of the EmailService's SendEmail RPC.
	EmailServiceSendEmailProcedure = "/serviceapis.messaging.v1.EmailService/SendEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	emailServiceServiceDescriptor         = v1.File_serviceapis_messaging_v1_email_proto.Services().ByName("EmailService")
	emailServiceSendEmailMethodDescriptor = emailServiceServiceDescriptor.Methods().ByName("SendEmail")
)

// EmailServiceClient is a client for the serviceapis.messaging.v1.EmailService service.
type EmailServiceClient interface {
	SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error)
}

// NewEmailServiceClient constructs a client for the serviceapis.messaging.v1.EmailService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &emailServiceClient{
		sendEmail: connect.NewClient[v1.SendEmailRequest, v1.SendEmailResponse](
			httpClient,
			baseURL+EmailServiceSendEmailProcedure,
			connect.WithSchema(emailServiceSendEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// emailServiceClient implements EmailServiceClient.
type emailServiceClient struct {
	sendEmail *connect.Client[v1.SendEmailRequest, v1.SendEmailResponse]
}

// SendEmail calls serviceapis.messaging.v1.EmailService.SendEmail.
func (c *emailServiceClient) SendEmail(ctx context.Context, req *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error) {
	return c.sendEmail.CallUnary(ctx, req)
}

// EmailServiceHandler is an implementation of the serviceapis.messaging.v1.EmailService service.
type EmailServiceHandler interface {
	SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error)
}

// NewEmailServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmailServiceHandler(svc EmailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	emailServiceSendEmailHandler := connect.NewUnaryHandler(
		EmailServiceSendEmailProcedure,
		svc.SendEmail,
		connect.WithSchema(emailServiceSendEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/serviceapis.messaging.v1.EmailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmailServiceSendEmailProcedure:
			emailServiceSendEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmailServiceHandler struct{}

func (UnimplementedEmailServiceHandler) SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.messaging.v1.EmailService.SendEmail is not implemented"))
}
